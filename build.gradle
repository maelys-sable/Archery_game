plugins {
    id 'java'
<<<<<<< HEAD
    id 'jacoco'
=======
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
>>>>>>> c84f47ec23fffa645a3ac59555ce2b68368801e0
}

group 'fr.ensicaen.ecole'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'fr.ensicaen.ecole.archery'
    mainClass = 'fr.ensicaen.ecole.archery.Main'
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation "org.openjfx:javafx-controls:16"
    implementation "org.openjfx:javafx-fxml:16"
}

test {
    useJUnitPlatform()}

<<<<<<< HEAD
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/'
        }
    }
}

jar {
    manifest {
        attributes (
                'Main-Class': 'fr.ensicaen.ecole.archery.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
=======
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}
>>>>>>> c84f47ec23fffa645a3ac59555ce2b68368801e0
