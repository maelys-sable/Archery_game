plugins {
    id 'application'
    id 'java'
    id 'jacoco'
}

group 'fr.ensicaen.ecole.archery'
version '2.0-MVP'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.openjfx:javafx-controls:21:linux"
    implementation "org.openjfx:javafx-fxml:21:linux"
    implementation "org.openjfx:javafx-graphics:21:linux"
    implementation "org.openjfx:javafx-base:21:linux"

    implementation "org.openjfx:javafx-controls:21:win"
    implementation "org.openjfx:javafx-fxml:21:win"
    implementation "org.openjfx:javafx-graphics:21:win"
    implementation "org.openjfx:javafx-base:21:win"

    implementation "org.openjfx:javafx-controls:21:mac"
    implementation "org.openjfx:javafx-fxml:21:mac"
    implementation "org.openjfx:javafx-graphics:21:mac"
    implementation "org.openjfx:javafx-base:21:mac"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
    testImplementation 'org.mockito:mockito-core:4.+'
}

application {
    mainClass = 'fr.ensicaen.ecole.archery.Main'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/'
        }
    }
}

jar {
    manifest {
        attributes (
                'Main-Class': 'fr.ensicaen.ecole.archery.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
